// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	// * 尝试连接
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
}

type statusServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatusServiceClient(cc *grpc.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/StatusService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	// * 尝试连接
	Ping(context.Context, *Empty) (*String, error)
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StatusService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StatusService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status_service.proto",
}

func init() {
	proto.RegisterFile("status_service.proto", fileDescriptor_status_service_095162c468ae0ebe)
}

var fileDescriptor_status_service_095162c468ae0ebe = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x2e, 0x49, 0x2c,
	0x29, 0x2d, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x97, 0xe2, 0x49, 0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0x81, 0xf0, 0x8c, 0xb4, 0xb8, 0x78, 0x83, 0xc1,
	0xaa, 0x82, 0x21, 0x8a, 0x84, 0x24, 0xb9, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0xd8, 0xf4, 0x5c,
	0x73, 0x0b, 0x4a, 0x2a, 0xa5, 0xd8, 0xf5, 0x82, 0x4b, 0x8a, 0x32, 0xf3, 0xd2, 0x95, 0x18, 0x9c,
	0xe4, 0xb8, 0x84, 0x93, 0xf3, 0x73, 0xf5, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0xd2, 0xf3,
	0x8d, 0xf2, 0xf5, 0x8a, 0x0a, 0x92, 0xa3, 0xd8, 0xf5, 0xac, 0xc1, 0x66, 0x25, 0xb1, 0x81, 0x29,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x08, 0x52, 0x6a, 0x78, 0x00, 0x00, 0x00,
}
